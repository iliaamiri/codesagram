// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  emailVerified DateTime?
  name      String
  image     String?


  posts     Post[]
  postLikes PostLike[]
  comments  Comment[]
  commentLikes CommentLike[]

  accounts      Account[]
  sessions      Session[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postTitle String
  code      String
  language  String?


  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  comments  Comment[]
  postLikes PostLike[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content   String


  postId    Int
  post      Post     @relation(fields: [postId], references: [id])

  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  likes     CommentLike[]
}

model PostLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId    Int
  post      Post     @relation(fields: [postId], references: [id])

  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}

model CommentLike {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    commentId Int
    comment   Comment  @relation(fields: [commentId], references: [id])

    authorId  String
    author    User     @relation(fields: [authorId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

